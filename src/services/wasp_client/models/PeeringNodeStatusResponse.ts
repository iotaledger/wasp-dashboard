/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.3.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PeeringNodeStatusResponse
 */
export interface PeeringNodeStatusResponse {
    /**
     * Whether or not the peer is activated
     * @type {boolean}
     * @memberof PeeringNodeStatusResponse
     */
    isAlive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PeeringNodeStatusResponse
     */
    isTrusted?: boolean;
    /**
     * The NetID of the peer
     * @type {string}
     * @memberof PeeringNodeStatusResponse
     */
    netId?: string;
    /**
     * The amount of users attached to the peer
     * @type {number}
     * @memberof PeeringNodeStatusResponse
     */
    numUsers?: number;
    /**
     * The peers public key encoded in Hex
     * @type {string}
     * @memberof PeeringNodeStatusResponse
     */
    publicKey?: string;
}

/**
 * Check if a given object implements the PeeringNodeStatusResponse interface.
 */
export function instanceOfPeeringNodeStatusResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PeeringNodeStatusResponseFromJSON(json: any): PeeringNodeStatusResponse {
    return PeeringNodeStatusResponseFromJSONTyped(json, false);
}

export function PeeringNodeStatusResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PeeringNodeStatusResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isAlive': !exists(json, 'isAlive') ? undefined : json['isAlive'],
        'isTrusted': !exists(json, 'isTrusted') ? undefined : json['isTrusted'],
        'netId': !exists(json, 'netId') ? undefined : json['netId'],
        'numUsers': !exists(json, 'numUsers') ? undefined : json['numUsers'],
        'publicKey': !exists(json, 'publicKey') ? undefined : json['publicKey'],
    };
}

export function PeeringNodeStatusResponseToJSON(value?: PeeringNodeStatusResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isAlive': value.isAlive,
        'isTrusted': value.isTrusted,
        'netId': value.netId,
        'numUsers': value.numUsers,
        'publicKey': value.publicKey,
    };
}

