/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.3.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContractCallViewRequest
 */
export interface ContractCallViewRequest {
    /**
     * Encoded arguments to be passed to the function
     * @type {{ [key: string]: Array<number>; }}
     * @memberof ContractCallViewRequest
     */
    arguments?: { [key: string]: Array<number>; };
    /**
     * The chain id
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    chainID?: string;
    /**
     * The contract name as HName
     * @type {number}
     * @memberof ContractCallViewRequest
     */
    contractHName?: number;
    /**
     * The contract name
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    contractName?: string;
    /**
     * The function name as HName
     * @type {number}
     * @memberof ContractCallViewRequest
     */
    functionHName?: number;
    /**
     * The function name
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    functionName?: string;
}

/**
 * Check if a given object implements the ContractCallViewRequest interface.
 */
export function instanceOfContractCallViewRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ContractCallViewRequestFromJSON(json: any): ContractCallViewRequest {
    return ContractCallViewRequestFromJSONTyped(json, false);
}

export function ContractCallViewRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractCallViewRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'arguments': !exists(json, 'Arguments') ? undefined : json['Arguments'],
        'chainID': !exists(json, 'ChainID') ? undefined : json['ChainID'],
        'contractHName': !exists(json, 'ContractHName') ? undefined : json['ContractHName'],
        'contractName': !exists(json, 'ContractName') ? undefined : json['ContractName'],
        'functionHName': !exists(json, 'FunctionHName') ? undefined : json['FunctionHName'],
        'functionName': !exists(json, 'FunctionName') ? undefined : json['FunctionName'],
    };
}

export function ContractCallViewRequestToJSON(value?: ContractCallViewRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Arguments': value.arguments,
        'ChainID': value.chainID,
        'ContractHName': value.contractHName,
        'ContractName': value.contractName,
        'FunctionHName': value.functionHName,
        'FunctionName': value.functionName,
    };
}

