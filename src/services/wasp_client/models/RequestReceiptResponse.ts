/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.3.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BurnLog } from './BurnLog';
import {
    BurnLogFromJSON,
    BurnLogFromJSONTyped,
    BurnLogToJSON,
} from './BurnLog';
import type { ReceiptError } from './ReceiptError';
import {
    ReceiptErrorFromJSON,
    ReceiptErrorFromJSONTyped,
    ReceiptErrorToJSON,
} from './ReceiptError';

/**
 * 
 * @export
 * @interface RequestReceiptResponse
 */
export interface RequestReceiptResponse {
    /**
     * 
     * @type {number}
     * @memberof RequestReceiptResponse
     */
    blockIndex?: number;
    /**
     * 
     * @type {ReceiptError}
     * @memberof RequestReceiptResponse
     */
    error?: ReceiptError;
    /**
     * 
     * @type {number}
     * @memberof RequestReceiptResponse
     */
    gasBudget?: number;
    /**
     * 
     * @type {BurnLog}
     * @memberof RequestReceiptResponse
     */
    gasBurnLog?: BurnLog;
    /**
     * 
     * @type {number}
     * @memberof RequestReceiptResponse
     */
    gasBurned?: number;
    /**
     * 
     * @type {number}
     * @memberof RequestReceiptResponse
     */
    gasFeeCharged?: number;
    /**
     * 
     * @type {string}
     * @memberof RequestReceiptResponse
     */
    request?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestReceiptResponse
     */
    requestIndex?: number;
}

/**
 * Check if a given object implements the RequestReceiptResponse interface.
 */
export function instanceOfRequestReceiptResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RequestReceiptResponseFromJSON(json: any): RequestReceiptResponse {
    return RequestReceiptResponseFromJSONTyped(json, false);
}

export function RequestReceiptResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestReceiptResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIndex': !exists(json, 'BlockIndex') ? undefined : json['BlockIndex'],
        'error': !exists(json, 'Error') ? undefined : ReceiptErrorFromJSON(json['Error']),
        'gasBudget': !exists(json, 'GasBudget') ? undefined : json['GasBudget'],
        'gasBurnLog': !exists(json, 'GasBurnLog') ? undefined : BurnLogFromJSON(json['GasBurnLog']),
        'gasBurned': !exists(json, 'GasBurned') ? undefined : json['GasBurned'],
        'gasFeeCharged': !exists(json, 'GasFeeCharged') ? undefined : json['GasFeeCharged'],
        'request': !exists(json, 'Request') ? undefined : json['Request'],
        'requestIndex': !exists(json, 'RequestIndex') ? undefined : json['RequestIndex'],
    };
}

export function RequestReceiptResponseToJSON(value?: RequestReceiptResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'BlockIndex': value.blockIndex,
        'Error': ReceiptErrorToJSON(value.error),
        'GasBudget': value.gasBudget,
        'GasBurnLog': BurnLogToJSON(value.gasBurnLog),
        'GasBurned': value.gasBurned,
        'GasFeeCharged': value.gasFeeCharged,
        'Request': value.request,
        'RequestIndex': value.requestIndex,
    };
}

