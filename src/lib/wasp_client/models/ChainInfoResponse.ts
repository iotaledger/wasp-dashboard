/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.4.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GasFeePolicy } from './GasFeePolicy';
import {
    GasFeePolicyFromJSON,
    GasFeePolicyFromJSONTyped,
    GasFeePolicyToJSON,
} from './GasFeePolicy';

/**
 * 
 * @export
 * @interface ChainInfoResponse
 */
export interface ChainInfoResponse {
    /**
     * ChainID (Bech32-encoded).
     * @type {string}
     * @memberof ChainInfoResponse
     */
    chainID?: string;
    /**
     * The chain owner address (Bech32-encoded).
     * @type {string}
     * @memberof ChainInfoResponse
     */
    chainOwnerId?: string;
    /**
     * The description of the chain.
     * @type {string}
     * @memberof ChainInfoResponse
     */
    description?: string;
    /**
     * The EVM chain ID
     * @type {number}
     * @memberof ChainInfoResponse
     */
    evmChainId?: number;
    /**
     * 
     * @type {GasFeePolicy}
     * @memberof ChainInfoResponse
     */
    gasFeePolicy?: GasFeePolicy;
    /**
     * Whether or not the chain is active.
     * @type {boolean}
     * @memberof ChainInfoResponse
     */
    isActive?: boolean;
    /**
     * The maximum contract blob size.
     * @type {number}
     * @memberof ChainInfoResponse
     */
    maxBlobSize?: number;
    /**
     * The maximum event size.
     * @type {number}
     * @memberof ChainInfoResponse
     */
    maxEventSize?: number;
    /**
     * The maximum amount of events per request.
     * @type {number}
     * @memberof ChainInfoResponse
     */
    maxEventsPerReq?: number;
}

/**
 * Check if a given object implements the ChainInfoResponse interface.
 */
export function instanceOfChainInfoResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ChainInfoResponseFromJSON(json: any): ChainInfoResponse {
    return ChainInfoResponseFromJSONTyped(json, false);
}

export function ChainInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChainInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'chainID': !exists(json, 'chainID') ? undefined : json['chainID'],
        'chainOwnerId': !exists(json, 'chainOwnerId') ? undefined : json['chainOwnerId'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'evmChainId': !exists(json, 'evmChainId') ? undefined : json['evmChainId'],
        'gasFeePolicy': !exists(json, 'gasFeePolicy') ? undefined : GasFeePolicyFromJSON(json['gasFeePolicy']),
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'maxBlobSize': !exists(json, 'maxBlobSize') ? undefined : json['maxBlobSize'],
        'maxEventSize': !exists(json, 'maxEventSize') ? undefined : json['maxEventSize'],
        'maxEventsPerReq': !exists(json, 'maxEventsPerReq') ? undefined : json['maxEventsPerReq'],
    };
}

export function ChainInfoResponseToJSON(value?: ChainInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'chainID': value.chainID,
        'chainOwnerId': value.chainOwnerId,
        'description': value.description,
        'evmChainId': value.evmChainId,
        'gasFeePolicy': GasFeePolicyToJSON(value.gasFeePolicy),
        'isActive': value.isActive,
        'maxBlobSize': value.maxBlobSize,
        'maxEventSize': value.maxEventSize,
        'maxEventsPerReq': value.maxEventsPerReq,
    };
}

