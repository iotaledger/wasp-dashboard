/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BlockInfoResponse
 */
export interface BlockInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof BlockInfoResponse
     */
    blockIndex: number;
    /**
     * The burned gas (uint64 as string)
     * @type {string}
     * @memberof BlockInfoResponse
     */
    gasBurned: string;
    /**
     * The charged gas fee (uint64 as string)
     * @type {string}
     * @memberof BlockInfoResponse
     */
    gasFeeCharged: string;
    /**
     * 
     * @type {number}
     * @memberof BlockInfoResponse
     */
    numOffLedgerRequests: number;
    /**
     * 
     * @type {number}
     * @memberof BlockInfoResponse
     */
    numSuccessfulRequests: number;
    /**
     * 
     * @type {string}
     * @memberof BlockInfoResponse
     */
    previousAliasOutput: string;
    /**
     * 
     * @type {Date}
     * @memberof BlockInfoResponse
     */
    timestamp: Date;
    /**
     * 
     * @type {number}
     * @memberof BlockInfoResponse
     */
    totalRequests: number;
}

/**
 * Check if a given object implements the BlockInfoResponse interface.
 */
export function instanceOfBlockInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "blockIndex" in value;
    isInstance = isInstance && "gasBurned" in value;
    isInstance = isInstance && "gasFeeCharged" in value;
    isInstance = isInstance && "numOffLedgerRequests" in value;
    isInstance = isInstance && "numSuccessfulRequests" in value;
    isInstance = isInstance && "previousAliasOutput" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "totalRequests" in value;

    return isInstance;
}

export function BlockInfoResponseFromJSON(json: any): BlockInfoResponse {
    return BlockInfoResponseFromJSONTyped(json, false);
}

export function BlockInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIndex': json['blockIndex'],
        'gasBurned': json['gasBurned'],
        'gasFeeCharged': json['gasFeeCharged'],
        'numOffLedgerRequests': json['numOffLedgerRequests'],
        'numSuccessfulRequests': json['numSuccessfulRequests'],
        'previousAliasOutput': json['previousAliasOutput'],
        'timestamp': (new Date(json['timestamp'])),
        'totalRequests': json['totalRequests'],
    };
}

export function BlockInfoResponseToJSON(value?: BlockInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIndex': value.blockIndex,
        'gasBurned': value.gasBurned,
        'gasFeeCharged': value.gasFeeCharged,
        'numOffLedgerRequests': value.numOffLedgerRequests,
        'numSuccessfulRequests': value.numSuccessfulRequests,
        'previousAliasOutput': value.previousAliasOutput,
        'timestamp': (value.timestamp.toISOString()),
        'totalRequests': value.totalRequests,
    };
}

