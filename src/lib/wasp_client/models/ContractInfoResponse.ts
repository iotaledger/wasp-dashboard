/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContractInfoResponse
 */
export interface ContractInfoResponse {
    /**
     * The description of the contract.
     * @type {string}
     * @memberof ContractInfoResponse
     */
    description: string;
    /**
     * The id (HName as Hex)) of the contract.
     * @type {string}
     * @memberof ContractInfoResponse
     */
    hName: string;
    /**
     * The name of the contract.
     * @type {string}
     * @memberof ContractInfoResponse
     */
    name: string;
    /**
     * The hash of the contract. (Hex encoded)
     * @type {string}
     * @memberof ContractInfoResponse
     */
    programHash: string;
}

/**
 * Check if a given object implements the ContractInfoResponse interface.
 */
export function instanceOfContractInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "hName" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "programHash" in value;

    return isInstance;
}

export function ContractInfoResponseFromJSON(json: any): ContractInfoResponse {
    return ContractInfoResponseFromJSONTyped(json, false);
}

export function ContractInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractInfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'hName': json['hName'],
        'name': json['name'],
        'programHash': json['programHash'],
    };
}

export function ContractInfoResponseToJSON(value?: ContractInfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'hName': value.hName,
        'name': value.name,
        'programHash': value.programHash,
    };
}

