/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.4.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BurnRecord } from './BurnRecord';
import {
    BurnRecordFromJSON,
    BurnRecordFromJSONTyped,
    BurnRecordToJSON,
} from './BurnRecord';
import type { ReceiptError } from './ReceiptError';
import {
    ReceiptErrorFromJSON,
    ReceiptErrorFromJSONTyped,
    ReceiptErrorToJSON,
} from './ReceiptError';

/**
 * 
 * @export
 * @interface ReceiptResponse
 */
export interface ReceiptResponse {
    /**
     * 
     * @type {number}
     * @memberof ReceiptResponse
     */
    blockIndex?: number;
    /**
     * 
     * @type {ReceiptError}
     * @memberof ReceiptResponse
     */
    error?: ReceiptError;
    /**
     * 
     * @type {number}
     * @memberof ReceiptResponse
     */
    gasBudget?: number;
    /**
     * 
     * @type {Array<BurnRecord>}
     * @memberof ReceiptResponse
     */
    gasBurnLog?: Array<BurnRecord>;
    /**
     * 
     * @type {number}
     * @memberof ReceiptResponse
     */
    gasBurned?: number;
    /**
     * 
     * @type {number}
     * @memberof ReceiptResponse
     */
    gasFeeCharged?: number;
    /**
     * 
     * @type {string}
     * @memberof ReceiptResponse
     */
    request?: string;
    /**
     * 
     * @type {number}
     * @memberof ReceiptResponse
     */
    requestIndex?: number;
}

/**
 * Check if a given object implements the ReceiptResponse interface.
 */
export function instanceOfReceiptResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReceiptResponseFromJSON(json: any): ReceiptResponse {
    return ReceiptResponseFromJSONTyped(json, false);
}

export function ReceiptResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiptResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIndex': !exists(json, 'blockIndex') ? undefined : json['blockIndex'],
        'error': !exists(json, 'error') ? undefined : ReceiptErrorFromJSON(json['error']),
        'gasBudget': !exists(json, 'gasBudget') ? undefined : json['gasBudget'],
        'gasBurnLog': !exists(json, 'gasBurnLog') ? undefined : ((json['gasBurnLog'] as Array<any>).map(BurnRecordFromJSON)),
        'gasBurned': !exists(json, 'gasBurned') ? undefined : json['gasBurned'],
        'gasFeeCharged': !exists(json, 'gasFeeCharged') ? undefined : json['gasFeeCharged'],
        'request': !exists(json, 'request') ? undefined : json['request'],
        'requestIndex': !exists(json, 'requestIndex') ? undefined : json['requestIndex'],
    };
}

export function ReceiptResponseToJSON(value?: ReceiptResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIndex': value.blockIndex,
        'error': ReceiptErrorToJSON(value.error),
        'gasBudget': value.gasBudget,
        'gasBurnLog': value.gasBurnLog === undefined ? undefined : ((value.gasBurnLog as Array<any>).map(BurnRecordToJSON)),
        'gasBurned': value.gasBurned,
        'gasFeeCharged': value.gasFeeCharged,
        'request': value.request,
        'requestIndex': value.requestIndex,
    };
}

