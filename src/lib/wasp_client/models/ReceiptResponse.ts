/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BurnRecord } from './BurnRecord';
import {
    BurnRecordFromJSON,
    BurnRecordFromJSONTyped,
    BurnRecordToJSON,
} from './BurnRecord';
import type { ReceiptError } from './ReceiptError';
import {
    ReceiptErrorFromJSON,
    ReceiptErrorFromJSONTyped,
    ReceiptErrorToJSON,
} from './ReceiptError';

/**
 * 
 * @export
 * @interface ReceiptResponse
 */
export interface ReceiptResponse {
    /**
     * 
     * @type {number}
     * @memberof ReceiptResponse
     */
    blockIndex: number;
    /**
     * 
     * @type {ReceiptError}
     * @memberof ReceiptResponse
     */
    error?: ReceiptError;
    /**
     * The gas budget (uint64 as string)
     * @type {string}
     * @memberof ReceiptResponse
     */
    gasBudget: string;
    /**
     * 
     * @type {Array<BurnRecord>}
     * @memberof ReceiptResponse
     */
    gasBurnLog: Array<BurnRecord>;
    /**
     * The burned gas (uint64 as string)
     * @type {string}
     * @memberof ReceiptResponse
     */
    gasBurned: string;
    /**
     * The charged gas fee (uint64 as string)
     * @type {string}
     * @memberof ReceiptResponse
     */
    gasFeeCharged: string;
    /**
     * 
     * @type {string}
     * @memberof ReceiptResponse
     */
    request: string;
    /**
     * 
     * @type {number}
     * @memberof ReceiptResponse
     */
    requestIndex: number;
}

/**
 * Check if a given object implements the ReceiptResponse interface.
 */
export function instanceOfReceiptResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "blockIndex" in value;
    isInstance = isInstance && "gasBudget" in value;
    isInstance = isInstance && "gasBurnLog" in value;
    isInstance = isInstance && "gasBurned" in value;
    isInstance = isInstance && "gasFeeCharged" in value;
    isInstance = isInstance && "request" in value;
    isInstance = isInstance && "requestIndex" in value;

    return isInstance;
}

export function ReceiptResponseFromJSON(json: any): ReceiptResponse {
    return ReceiptResponseFromJSONTyped(json, false);
}

export function ReceiptResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiptResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'blockIndex': json['blockIndex'],
        'error': !exists(json, 'error') ? undefined : ReceiptErrorFromJSON(json['error']),
        'gasBudget': json['gasBudget'],
        'gasBurnLog': ((json['gasBurnLog'] as Array<any>).map(BurnRecordFromJSON)),
        'gasBurned': json['gasBurned'],
        'gasFeeCharged': json['gasFeeCharged'],
        'request': json['request'],
        'requestIndex': json['requestIndex'],
    };
}

export function ReceiptResponseToJSON(value?: ReceiptResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'blockIndex': value.blockIndex,
        'error': ReceiptErrorToJSON(value.error),
        'gasBudget': value.gasBudget,
        'gasBurnLog': ((value.gasBurnLog as Array<any>).map(BurnRecordToJSON)),
        'gasBurned': value.gasBurned,
        'gasFeeCharged': value.gasFeeCharged,
        'request': value.request,
        'requestIndex': value.requestIndex,
    };
}

