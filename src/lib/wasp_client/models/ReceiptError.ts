/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.4.0-alpha.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReceiptError
 */
export interface ReceiptError {
    /**
     * 
     * @type {number}
     * @memberof ReceiptError
     */
    contractId?: number;
    /**
     * 
     * @type {string}
     * @memberof ReceiptError
     */
    errorCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ReceiptError
     */
    errorId?: number;
    /**
     * 
     * @type {string}
     * @memberof ReceiptError
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ReceiptError
     */
    messageFormat?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReceiptError
     */
    parameters?: Array<string>;
}

/**
 * Check if a given object implements the ReceiptError interface.
 */
export function instanceOfReceiptError(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ReceiptErrorFromJSON(json: any): ReceiptError {
    return ReceiptErrorFromJSONTyped(json, false);
}

export function ReceiptErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiptError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contractId': !exists(json, 'contractId') ? undefined : json['contractId'],
        'errorCode': !exists(json, 'errorCode') ? undefined : json['errorCode'],
        'errorId': !exists(json, 'errorId') ? undefined : json['errorId'],
        'message': !exists(json, 'message') ? undefined : json['message'],
        'messageFormat': !exists(json, 'messageFormat') ? undefined : json['messageFormat'],
        'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
    };
}

export function ReceiptErrorToJSON(value?: ReceiptError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contractId': value.contractId,
        'errorCode': value.errorCode,
        'errorId': value.errorId,
        'message': value.message,
        'messageFormat': value.messageFormat,
        'parameters': value.parameters,
    };
}

