/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReceiptError
 */
export interface ReceiptError {
    /**
     * The contract hname (Hex)
     * @type {string}
     * @memberof ReceiptError
     */
    contractHName: string;
    /**
     * 
     * @type {string}
     * @memberof ReceiptError
     */
    errorCode: string;
    /**
     * 
     * @type {number}
     * @memberof ReceiptError
     */
    errorId: number;
    /**
     * 
     * @type {string}
     * @memberof ReceiptError
     */
    message: string;
    /**
     * 
     * @type {string}
     * @memberof ReceiptError
     */
    messageFormat: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ReceiptError
     */
    parameters: Array<string>;
}

/**
 * Check if a given object implements the ReceiptError interface.
 */
export function instanceOfReceiptError(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contractHName" in value;
    isInstance = isInstance && "errorCode" in value;
    isInstance = isInstance && "errorId" in value;
    isInstance = isInstance && "message" in value;
    isInstance = isInstance && "messageFormat" in value;
    isInstance = isInstance && "parameters" in value;

    return isInstance;
}

export function ReceiptErrorFromJSON(json: any): ReceiptError {
    return ReceiptErrorFromJSONTyped(json, false);
}

export function ReceiptErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReceiptError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contractHName': json['contractHName'],
        'errorCode': json['errorCode'],
        'errorId': json['errorId'],
        'message': json['message'],
        'messageFormat': json['messageFormat'],
        'parameters': json['parameters'],
    };
}

export function ReceiptErrorToJSON(value?: ReceiptError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contractHName': value.contractHName,
        'errorCode': value.errorCode,
        'errorId': value.errorId,
        'message': value.message,
        'messageFormat': value.messageFormat,
        'parameters': value.parameters,
    };
}

