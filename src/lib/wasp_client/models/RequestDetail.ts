/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Assets } from './Assets';
import {
    AssetsFromJSON,
    AssetsFromJSONTyped,
    AssetsToJSON,
} from './Assets';
import type { CallTarget } from './CallTarget';
import {
    CallTargetFromJSON,
    CallTargetFromJSONTyped,
    CallTargetToJSON,
} from './CallTarget';
import type { JSONDict } from './JSONDict';
import {
    JSONDictFromJSON,
    JSONDictFromJSONTyped,
    JSONDictToJSON,
} from './JSONDict';
import type { NFTDataResponse } from './NFTDataResponse';
import {
    NFTDataResponseFromJSON,
    NFTDataResponseFromJSONTyped,
    NFTDataResponseToJSON,
} from './NFTDataResponse';

/**
 * 
 * @export
 * @interface RequestDetail
 */
export interface RequestDetail {
    /**
     * 
     * @type {Assets}
     * @memberof RequestDetail
     */
    allowance: Assets;
    /**
     * 
     * @type {CallTarget}
     * @memberof RequestDetail
     */
    callTarget: CallTarget;
    /**
     * 
     * @type {Assets}
     * @memberof RequestDetail
     */
    fungibleTokens: Assets;
    /**
     * The gas budget (uint64 as string)
     * @type {string}
     * @memberof RequestDetail
     */
    gasGudget: string;
    /**
     * 
     * @type {boolean}
     * @memberof RequestDetail
     */
    isEVM: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RequestDetail
     */
    isOffLedger: boolean;
    /**
     * 
     * @type {NFTDataResponse}
     * @memberof RequestDetail
     */
    nft: NFTDataResponse;
    /**
     * 
     * @type {JSONDict}
     * @memberof RequestDetail
     */
    params: JSONDict;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    requestId: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    senderAccount: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    targetAddress: string;
}

/**
 * Check if a given object implements the RequestDetail interface.
 */
export function instanceOfRequestDetail(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "allowance" in value;
    isInstance = isInstance && "callTarget" in value;
    isInstance = isInstance && "fungibleTokens" in value;
    isInstance = isInstance && "gasGudget" in value;
    isInstance = isInstance && "isEVM" in value;
    isInstance = isInstance && "isOffLedger" in value;
    isInstance = isInstance && "nft" in value;
    isInstance = isInstance && "params" in value;
    isInstance = isInstance && "requestId" in value;
    isInstance = isInstance && "senderAccount" in value;
    isInstance = isInstance && "targetAddress" in value;

    return isInstance;
}

export function RequestDetailFromJSON(json: any): RequestDetail {
    return RequestDetailFromJSONTyped(json, false);
}

export function RequestDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowance': AssetsFromJSON(json['allowance']),
        'callTarget': CallTargetFromJSON(json['callTarget']),
        'fungibleTokens': AssetsFromJSON(json['fungibleTokens']),
        'gasGudget': json['gasGudget'],
        'isEVM': json['isEVM'],
        'isOffLedger': json['isOffLedger'],
        'nft': NFTDataResponseFromJSON(json['nft']),
        'params': JSONDictFromJSON(json['params']),
        'requestId': json['requestId'],
        'senderAccount': json['senderAccount'],
        'targetAddress': json['targetAddress'],
    };
}

export function RequestDetailToJSON(value?: RequestDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowance': AssetsToJSON(value.allowance),
        'callTarget': CallTargetToJSON(value.callTarget),
        'fungibleTokens': AssetsToJSON(value.fungibleTokens),
        'gasGudget': value.gasGudget,
        'isEVM': value.isEVM,
        'isOffLedger': value.isOffLedger,
        'nft': NFTDataResponseToJSON(value.nft),
        'params': JSONDictToJSON(value.params),
        'requestId': value.requestId,
        'senderAccount': value.senderAccount,
        'targetAddress': value.targetAddress,
    };
}

