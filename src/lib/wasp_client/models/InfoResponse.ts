/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { L1Params } from './L1Params';
import {
    L1ParamsFromJSON,
    L1ParamsFromJSONTyped,
    L1ParamsToJSON,
} from './L1Params';

/**
 * 
 * @export
 * @interface InfoResponse
 */
export interface InfoResponse {
    /**
     * 
     * @type {L1Params}
     * @memberof InfoResponse
     */
    l1Params: L1Params;
    /**
     * The net id of the node
     * @type {string}
     * @memberof InfoResponse
     */
    peeringURL: string;
    /**
     * The public key of the node (Hex)
     * @type {string}
     * @memberof InfoResponse
     */
    publicKey: string;
    /**
     * The version of the node
     * @type {string}
     * @memberof InfoResponse
     */
    version: string;
}

/**
 * Check if a given object implements the InfoResponse interface.
 */
export function instanceOfInfoResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "l1Params" in value;
    isInstance = isInstance && "peeringURL" in value;
    isInstance = isInstance && "publicKey" in value;
    isInstance = isInstance && "version" in value;

    return isInstance;
}

export function InfoResponseFromJSON(json: any): InfoResponse {
    return InfoResponseFromJSONTyped(json, false);
}

export function InfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): InfoResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'l1Params': L1ParamsFromJSON(json['l1Params']),
        'peeringURL': json['peeringURL'],
        'publicKey': json['publicKey'],
        'version': json['version'],
    };
}

export function InfoResponseToJSON(value?: InfoResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'l1Params': L1ParamsToJSON(value.l1Params),
        'peeringURL': value.peeringURL,
        'publicKey': value.publicKey,
        'version': value.version,
    };
}

