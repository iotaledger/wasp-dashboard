/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConsensusWorkflowMetrics
 */
export interface ConsensusWorkflowMetrics {
    /**
     * Shows current state index of the consensus
     * @type {number}
     * @memberof ConsensusWorkflowMetrics
     */
    currentStateIndex?: number;
    /**
     * Shows if batch proposal is sent out in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagBatchProposalSent: boolean;
    /**
     * Shows if consensus on batch is reached and known in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagConsensusBatchKnown: boolean;
    /**
     * Shows if consensus algorithm is still not completed in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagInProgress: boolean;
    /**
     * Shows if state output is received in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagStateReceived: boolean;
    /**
     * Shows if consensus on transaction is reached in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagTransactionFinalized: boolean;
    /**
     * Shows if transaction is posted to L1 in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagTransactionPosted: boolean;
    /**
     * Shows if L1 reported that it has seen the transaction of current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagTransactionSeen: boolean;
    /**
     * Shows if virtual machine has returned its results in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagVMResultSigned: boolean;
    /**
     * Shows if virtual machine is started in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowMetrics
     */
    flagVMStarted: boolean;
    /**
     * Shows when batch proposal was last sent out in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeBatchProposalSent: Date;
    /**
     * Shows when algorithm was last completed in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeCompleted: Date;
    /**
     * Shows when ACS results of consensus on batch was last received in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeConsensusBatchKnown: Date;
    /**
     * Shows when algorithm last noted that all the data for consensus on transaction had been received in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeTransactionFinalized: Date;
    /**
     * Shows when transaction was last posted to L1 in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeTransactionPosted: Date;
    /**
     * Shows when algorithm last noted that transaction had been seen by L1 in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeTransactionSeen: Date;
    /**
     * Shows when virtual machine results were last received and signed in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeVMResultSigned: Date;
    /**
     * Shows when virtual machine was last started in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowMetrics
     */
    timeVMStarted: Date;
}

/**
 * Check if a given object implements the ConsensusWorkflowMetrics interface.
 */
export function instanceOfConsensusWorkflowMetrics(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "flagBatchProposalSent" in value;
    isInstance = isInstance && "flagConsensusBatchKnown" in value;
    isInstance = isInstance && "flagInProgress" in value;
    isInstance = isInstance && "flagStateReceived" in value;
    isInstance = isInstance && "flagTransactionFinalized" in value;
    isInstance = isInstance && "flagTransactionPosted" in value;
    isInstance = isInstance && "flagTransactionSeen" in value;
    isInstance = isInstance && "flagVMResultSigned" in value;
    isInstance = isInstance && "flagVMStarted" in value;
    isInstance = isInstance && "timeBatchProposalSent" in value;
    isInstance = isInstance && "timeCompleted" in value;
    isInstance = isInstance && "timeConsensusBatchKnown" in value;
    isInstance = isInstance && "timeTransactionFinalized" in value;
    isInstance = isInstance && "timeTransactionPosted" in value;
    isInstance = isInstance && "timeTransactionSeen" in value;
    isInstance = isInstance && "timeVMResultSigned" in value;
    isInstance = isInstance && "timeVMStarted" in value;

    return isInstance;
}

export function ConsensusWorkflowMetricsFromJSON(json: any): ConsensusWorkflowMetrics {
    return ConsensusWorkflowMetricsFromJSONTyped(json, false);
}

export function ConsensusWorkflowMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsensusWorkflowMetrics {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currentStateIndex': !exists(json, 'currentStateIndex') ? undefined : json['currentStateIndex'],
        'flagBatchProposalSent': json['flagBatchProposalSent'],
        'flagConsensusBatchKnown': json['flagConsensusBatchKnown'],
        'flagInProgress': json['flagInProgress'],
        'flagStateReceived': json['flagStateReceived'],
        'flagTransactionFinalized': json['flagTransactionFinalized'],
        'flagTransactionPosted': json['flagTransactionPosted'],
        'flagTransactionSeen': json['flagTransactionSeen'],
        'flagVMResultSigned': json['flagVMResultSigned'],
        'flagVMStarted': json['flagVMStarted'],
        'timeBatchProposalSent': (new Date(json['timeBatchProposalSent'])),
        'timeCompleted': (new Date(json['timeCompleted'])),
        'timeConsensusBatchKnown': (new Date(json['timeConsensusBatchKnown'])),
        'timeTransactionFinalized': (new Date(json['timeTransactionFinalized'])),
        'timeTransactionPosted': (new Date(json['timeTransactionPosted'])),
        'timeTransactionSeen': (new Date(json['timeTransactionSeen'])),
        'timeVMResultSigned': (new Date(json['timeVMResultSigned'])),
        'timeVMStarted': (new Date(json['timeVMStarted'])),
    };
}

export function ConsensusWorkflowMetricsToJSON(value?: ConsensusWorkflowMetrics | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currentStateIndex': value.currentStateIndex,
        'flagBatchProposalSent': value.flagBatchProposalSent,
        'flagConsensusBatchKnown': value.flagConsensusBatchKnown,
        'flagInProgress': value.flagInProgress,
        'flagStateReceived': value.flagStateReceived,
        'flagTransactionFinalized': value.flagTransactionFinalized,
        'flagTransactionPosted': value.flagTransactionPosted,
        'flagTransactionSeen': value.flagTransactionSeen,
        'flagVMResultSigned': value.flagVMResultSigned,
        'flagVMStarted': value.flagVMStarted,
        'timeBatchProposalSent': (value.timeBatchProposalSent.toISOString()),
        'timeCompleted': (value.timeCompleted.toISOString()),
        'timeConsensusBatchKnown': (value.timeConsensusBatchKnown.toISOString()),
        'timeTransactionFinalized': (value.timeTransactionFinalized.toISOString()),
        'timeTransactionPosted': (value.timeTransactionPosted.toISOString()),
        'timeTransactionSeen': (value.timeTransactionSeen.toISOString()),
        'timeVMResultSigned': (value.timeVMResultSigned.toISOString()),
        'timeVMStarted': (value.timeVMStarted.toISOString()),
    };
}

