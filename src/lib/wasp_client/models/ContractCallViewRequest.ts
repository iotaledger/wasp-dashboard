/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JSONDict } from './JSONDict';
import {
    JSONDictFromJSON,
    JSONDictFromJSONTyped,
    JSONDictToJSON,
} from './JSONDict';

/**
 * 
 * @export
 * @interface ContractCallViewRequest
 */
export interface ContractCallViewRequest {
    /**
     * 
     * @type {JSONDict}
     * @memberof ContractCallViewRequest
     */
    arguments: JSONDict;
    /**
     * The chain id
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    chainId: string;
    /**
     * The contract name as HName (Hex)
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    contractHName: string;
    /**
     * The contract name
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    contractName: string;
    /**
     * The function name as HName (Hex)
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    functionHName: string;
    /**
     * The function name
     * @type {string}
     * @memberof ContractCallViewRequest
     */
    functionName: string;
}

/**
 * Check if a given object implements the ContractCallViewRequest interface.
 */
export function instanceOfContractCallViewRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "arguments" in value;
    isInstance = isInstance && "chainId" in value;
    isInstance = isInstance && "contractHName" in value;
    isInstance = isInstance && "contractName" in value;
    isInstance = isInstance && "functionHName" in value;
    isInstance = isInstance && "functionName" in value;

    return isInstance;
}

export function ContractCallViewRequestFromJSON(json: any): ContractCallViewRequest {
    return ContractCallViewRequestFromJSONTyped(json, false);
}

export function ContractCallViewRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContractCallViewRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'arguments': JSONDictFromJSON(json['arguments']),
        'chainId': json['chainId'],
        'contractHName': json['contractHName'],
        'contractName': json['contractName'],
        'functionHName': json['functionHName'],
        'functionName': json['functionName'],
    };
}

export function ContractCallViewRequestToJSON(value?: ContractCallViewRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'arguments': JSONDictToJSON(value.arguments),
        'chainId': value.chainId,
        'contractHName': value.contractHName,
        'contractName': value.contractName,
        'functionHName': value.functionHName,
        'functionName': value.functionName,
    };
}

