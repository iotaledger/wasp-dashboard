/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 123
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InfoResponse,
  JSONDict,
  OffLedgerRequestBody,
  RequestReceiptResponse,
  WaitRequestProcessedParams,
} from '../models';
import {
    InfoResponseFromJSON,
    InfoResponseToJSON,
    JSONDictFromJSON,
    JSONDictToJSON,
    OffLedgerRequestBodyFromJSON,
    OffLedgerRequestBodyToJSON,
    RequestReceiptResponseFromJSON,
    RequestReceiptResponseToJSON,
    WaitRequestProcessedParamsFromJSON,
    WaitRequestProcessedParamsToJSON,
} from '../models';

export interface ChainChainIDContractContractHnameCallviewFnameGetRequest {
    chainID: string;
    contractHname: string;
    fname: string;
    params?: JSONDict;
}

export interface ChainChainIDContractContractHnameCallviewFnamePostRequest {
    chainID: string;
    contractHname: string;
    fname: string;
    params?: JSONDict;
}

export interface ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest {
    chainID: string;
    contractHname: string;
    functionHname: string;
    params?: JSONDict;
}

export interface ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest {
    chainID: string;
    contractHname: string;
    functionHname: string;
    params?: JSONDict;
}

export interface ChainChainIDEvmReqidTxHashGetRequest {
    chainID: string;
    txHash: string;
}

export interface ChainChainIDRequestPostRequest {
    chainID: string;
    request?: OffLedgerRequestBody;
}

export interface ChainChainIDRequestReqIDReceiptGetRequest {
    chainID: string;
    reqID: string;
}

export interface ChainChainIDRequestReqIDWaitGetRequest {
    chainID: string;
    reqID: string;
    params?: WaitRequestProcessedParams;
}

export interface ChainChainIDStateKeyGetRequest {
    chainID: string;
    key: string;
}

export interface ChainChainIDWsGetRequest {
    chainID: string;
}

/**
 * 
 */
export class PublicApi extends runtime.BaseAPI {

    /**
     * Call a view function on a contract by name
     */
    async chainChainIDContractContractHnameCallviewFnameGetRaw(requestParameters: ChainChainIDContractContractHnameCallviewFnameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JSONDict>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDContractContractHnameCallviewFnameGet.');
        }

        if (requestParameters.contractHname === null || requestParameters.contractHname === undefined) {
            throw new runtime.RequiredError('contractHname','Required parameter requestParameters.contractHname was null or undefined when calling chainChainIDContractContractHnameCallviewFnameGet.');
        }

        if (requestParameters.fname === null || requestParameters.fname === undefined) {
            throw new runtime.RequiredError('fname','Required parameter requestParameters.fname was null or undefined when calling chainChainIDContractContractHnameCallviewFnameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chain/{chainID}/contract/{contractHname}/callview/{fname}`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"contractHname"}}`, encodeURIComponent(String(requestParameters.contractHname))).replace(`{${"fname"}}`, encodeURIComponent(String(requestParameters.fname))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: JSONDictToJSON(requestParameters.params),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JSONDictFromJSON(jsonValue));
    }

    /**
     * Call a view function on a contract by name
     */
    async chainChainIDContractContractHnameCallviewFnameGet(requestParameters: ChainChainIDContractContractHnameCallviewFnameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JSONDict> {
        const response = await this.chainChainIDContractContractHnameCallviewFnameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call a view function on a contract by name
     */
    async chainChainIDContractContractHnameCallviewFnamePostRaw(requestParameters: ChainChainIDContractContractHnameCallviewFnamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JSONDict>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDContractContractHnameCallviewFnamePost.');
        }

        if (requestParameters.contractHname === null || requestParameters.contractHname === undefined) {
            throw new runtime.RequiredError('contractHname','Required parameter requestParameters.contractHname was null or undefined when calling chainChainIDContractContractHnameCallviewFnamePost.');
        }

        if (requestParameters.fname === null || requestParameters.fname === undefined) {
            throw new runtime.RequiredError('fname','Required parameter requestParameters.fname was null or undefined when calling chainChainIDContractContractHnameCallviewFnamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chain/{chainID}/contract/{contractHname}/callview/{fname}`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"contractHname"}}`, encodeURIComponent(String(requestParameters.contractHname))).replace(`{${"fname"}}`, encodeURIComponent(String(requestParameters.fname))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JSONDictToJSON(requestParameters.params),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JSONDictFromJSON(jsonValue));
    }

    /**
     * Call a view function on a contract by name
     */
    async chainChainIDContractContractHnameCallviewFnamePost(requestParameters: ChainChainIDContractContractHnameCallviewFnamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JSONDict> {
        const response = await this.chainChainIDContractContractHnameCallviewFnamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call a view function on a contract by Hname
     */
    async chainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRaw(requestParameters: ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JSONDict>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDContractContractHnameCallviewbyhnameFunctionHnameGet.');
        }

        if (requestParameters.contractHname === null || requestParameters.contractHname === undefined) {
            throw new runtime.RequiredError('contractHname','Required parameter requestParameters.contractHname was null or undefined when calling chainChainIDContractContractHnameCallviewbyhnameFunctionHnameGet.');
        }

        if (requestParameters.functionHname === null || requestParameters.functionHname === undefined) {
            throw new runtime.RequiredError('functionHname','Required parameter requestParameters.functionHname was null or undefined when calling chainChainIDContractContractHnameCallviewbyhnameFunctionHnameGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chain/{chainID}/contract/{contractHname}/callviewbyhname/{functionHname}`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"contractHname"}}`, encodeURIComponent(String(requestParameters.contractHname))).replace(`{${"functionHname"}}`, encodeURIComponent(String(requestParameters.functionHname))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: JSONDictToJSON(requestParameters.params),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JSONDictFromJSON(jsonValue));
    }

    /**
     * Call a view function on a contract by Hname
     */
    async chainChainIDContractContractHnameCallviewbyhnameFunctionHnameGet(requestParameters: ChainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JSONDict> {
        const response = await this.chainChainIDContractContractHnameCallviewbyhnameFunctionHnameGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Call a view function on a contract by Hname
     */
    async chainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRaw(requestParameters: ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JSONDict>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDContractContractHnameCallviewbyhnameFunctionHnamePost.');
        }

        if (requestParameters.contractHname === null || requestParameters.contractHname === undefined) {
            throw new runtime.RequiredError('contractHname','Required parameter requestParameters.contractHname was null or undefined when calling chainChainIDContractContractHnameCallviewbyhnameFunctionHnamePost.');
        }

        if (requestParameters.functionHname === null || requestParameters.functionHname === undefined) {
            throw new runtime.RequiredError('functionHname','Required parameter requestParameters.functionHname was null or undefined when calling chainChainIDContractContractHnameCallviewbyhnameFunctionHnamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chain/{chainID}/contract/{contractHname}/callviewbyhname/{functionHname}`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"contractHname"}}`, encodeURIComponent(String(requestParameters.contractHname))).replace(`{${"functionHname"}}`, encodeURIComponent(String(requestParameters.functionHname))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JSONDictToJSON(requestParameters.params),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JSONDictFromJSON(jsonValue));
    }

    /**
     * Call a view function on a contract by Hname
     */
    async chainChainIDContractContractHnameCallviewbyhnameFunctionHnamePost(requestParameters: ChainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JSONDict> {
        const response = await this.chainChainIDContractContractHnameCallviewbyhnameFunctionHnamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the ISC request ID for the given Ethereum transaction hash
     */
    async chainChainIDEvmReqidTxHashGetRaw(requestParameters: ChainChainIDEvmReqidTxHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDEvmReqidTxHashGet.');
        }

        if (requestParameters.txHash === null || requestParameters.txHash === undefined) {
            throw new runtime.RequiredError('txHash','Required parameter requestParameters.txHash was null or undefined when calling chainChainIDEvmReqidTxHashGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chain/{chainID}/evm/reqid/{txHash}`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"txHash"}}`, encodeURIComponent(String(requestParameters.txHash))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get the ISC request ID for the given Ethereum transaction hash
     */
    async chainChainIDEvmReqidTxHashGet(requestParameters: ChainChainIDEvmReqidTxHashGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.chainChainIDEvmReqidTxHashGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Post an off-ledger request
     */
    async chainChainIDRequestPostRaw(requestParameters: ChainChainIDRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDRequestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chain/{chainID}/request`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OffLedgerRequestBodyToJSON(requestParameters.request),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Post an off-ledger request
     */
    async chainChainIDRequestPost(requestParameters: ChainChainIDRequestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chainChainIDRequestPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get the processing status of a given request in the node
     */
    async chainChainIDRequestReqIDReceiptGetRaw(requestParameters: ChainChainIDRequestReqIDReceiptGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestReceiptResponse>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDRequestReqIDReceiptGet.');
        }

        if (requestParameters.reqID === null || requestParameters.reqID === undefined) {
            throw new runtime.RequiredError('reqID','Required parameter requestParameters.reqID was null or undefined when calling chainChainIDRequestReqIDReceiptGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chain/{chainID}/request/{reqID}/receipt`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"reqID"}}`, encodeURIComponent(String(requestParameters.reqID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestReceiptResponseFromJSON(jsonValue));
    }

    /**
     * Get the processing status of a given request in the node
     */
    async chainChainIDRequestReqIDReceiptGet(requestParameters: ChainChainIDRequestReqIDReceiptGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestReceiptResponse> {
        const response = await this.chainChainIDRequestReqIDReceiptGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Wait until the given request has been processed by the node
     */
    async chainChainIDRequestReqIDWaitGetRaw(requestParameters: ChainChainIDRequestReqIDWaitGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestReceiptResponse>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDRequestReqIDWaitGet.');
        }

        if (requestParameters.reqID === null || requestParameters.reqID === undefined) {
            throw new runtime.RequiredError('reqID','Required parameter requestParameters.reqID was null or undefined when calling chainChainIDRequestReqIDWaitGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/chain/{chainID}/request/{reqID}/wait`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"reqID"}}`, encodeURIComponent(String(requestParameters.reqID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: WaitRequestProcessedParamsToJSON(requestParameters.params),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestReceiptResponseFromJSON(jsonValue));
    }

    /**
     * Wait until the given request has been processed by the node
     */
    async chainChainIDRequestReqIDWaitGet(requestParameters: ChainChainIDRequestReqIDWaitGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestReceiptResponse> {
        const response = await this.chainChainIDRequestReqIDWaitGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetch the raw value associated with the given key in the chain state
     */
    async chainChainIDStateKeyGetRaw(requestParameters: ChainChainIDStateKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDStateKeyGet.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling chainChainIDStateKeyGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chain/{chainID}/state/{key}`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))).replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Fetch the raw value associated with the given key in the chain state
     */
    async chainChainIDStateKeyGet(requestParameters: ChainChainIDStateKeyGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.chainChainIDStateKeyGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async chainChainIDWsGetRaw(requestParameters: ChainChainIDWsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling chainChainIDWsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chain/{chainID}/ws`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async chainChainIDWsGet(requestParameters: ChainChainIDWsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.chainChainIDWsGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get information about the node
     */
    async infoGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InfoResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoResponseFromJSON(jsonValue));
    }

    /**
     * Get information about the node
     */
    async infoGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InfoResponse> {
        const response = await this.infoGetRaw(initOverrides);
        return await response.value();
    }

}
