/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChainMessageMetrics,
  ConsensusPipeMetrics,
  ConsensusWorkflowMetrics,
  NodeMessageMetrics,
  ValidationError,
} from '../models';
import {
    ChainMessageMetricsFromJSON,
    ChainMessageMetricsToJSON,
    ConsensusPipeMetricsFromJSON,
    ConsensusPipeMetricsToJSON,
    ConsensusWorkflowMetricsFromJSON,
    ConsensusWorkflowMetricsToJSON,
    NodeMessageMetricsFromJSON,
    NodeMessageMetricsToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface GetChainMessageMetricsRequest {
    chainID: string;
}

export interface GetChainPipeMetricsRequest {
    chainID: string;
}

export interface GetChainWorkflowMetricsRequest {
    chainID: string;
}

/**
 * 
 */
export class MetricsApi extends runtime.BaseAPI {

    /**
     * Get chain specific message metrics.
     */
    async getChainMessageMetricsRaw(requestParameters: GetChainMessageMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChainMessageMetrics>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling getChainMessageMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/metrics/chain/{chainID}/messages`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChainMessageMetricsFromJSON(jsonValue));
    }

    /**
     * Get chain specific message metrics.
     */
    async getChainMessageMetrics(requestParameters: GetChainMessageMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChainMessageMetrics> {
        const response = await this.getChainMessageMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get chain pipe event metrics.
     */
    async getChainPipeMetricsRaw(requestParameters: GetChainPipeMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsensusPipeMetrics>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling getChainPipeMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/metrics/chain/{chainID}/pipe`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsensusPipeMetricsFromJSON(jsonValue));
    }

    /**
     * Get chain pipe event metrics.
     */
    async getChainPipeMetrics(requestParameters: GetChainPipeMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsensusPipeMetrics> {
        const response = await this.getChainPipeMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get chain workflow metrics.
     */
    async getChainWorkflowMetricsRaw(requestParameters: GetChainWorkflowMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsensusWorkflowMetrics>> {
        if (requestParameters.chainID === null || requestParameters.chainID === undefined) {
            throw new runtime.RequiredError('chainID','Required parameter requestParameters.chainID was null or undefined when calling getChainWorkflowMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/metrics/chain/{chainID}/workflow`.replace(`{${"chainID"}}`, encodeURIComponent(String(requestParameters.chainID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsensusWorkflowMetricsFromJSON(jsonValue));
    }

    /**
     * Get chain workflow metrics.
     */
    async getChainWorkflowMetrics(requestParameters: GetChainWorkflowMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsensusWorkflowMetrics> {
        const response = await this.getChainWorkflowMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get accumulated message metrics.
     */
    async getNodeMessageMetricsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NodeMessageMetrics>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/v1/metrics/node/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NodeMessageMetricsFromJSON(jsonValue));
    }

    /**
     * Get accumulated message metrics.
     */
    async getNodeMessageMetrics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NodeMessageMetrics> {
        const response = await this.getNodeMessageMetricsRaw(initOverrides);
        return await response.value();
    }

}
