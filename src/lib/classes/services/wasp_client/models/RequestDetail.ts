/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.4.0-alpha.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Allowance } from './Allowance';
import {
    AllowanceFromJSON,
    AllowanceFromJSONTyped,
    AllowanceToJSON,
} from './Allowance';
import type { CallTarget } from './CallTarget';
import {
    CallTargetFromJSON,
    CallTargetFromJSONTyped,
    CallTargetToJSON,
} from './CallTarget';
import type { FungibleTokens } from './FungibleTokens';
import {
    FungibleTokensFromJSON,
    FungibleTokensFromJSONTyped,
    FungibleTokensToJSON,
} from './FungibleTokens';
import type { JSONDict } from './JSONDict';
import {
    JSONDictFromJSON,
    JSONDictFromJSONTyped,
    JSONDictToJSON,
} from './JSONDict';
import type { NFTDataResponse } from './NFTDataResponse';
import {
    NFTDataResponseFromJSON,
    NFTDataResponseFromJSONTyped,
    NFTDataResponseToJSON,
} from './NFTDataResponse';

/**
 * 
 * @export
 * @interface RequestDetail
 */
export interface RequestDetail {
    /**
     * 
     * @type {Allowance}
     * @memberof RequestDetail
     */
    allowance?: Allowance;
    /**
     * 
     * @type {CallTarget}
     * @memberof RequestDetail
     */
    callTarget?: CallTarget;
    /**
     * 
     * @type {FungibleTokens}
     * @memberof RequestDetail
     */
    fungibleTokens?: FungibleTokens;
    /**
     * 
     * @type {number}
     * @memberof RequestDetail
     */
    gasGudget?: number;
    /**
     * 
     * @type {boolean}
     * @memberof RequestDetail
     */
    isEVM?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RequestDetail
     */
    isOffLedger?: boolean;
    /**
     * 
     * @type {NFTDataResponse}
     * @memberof RequestDetail
     */
    nft?: NFTDataResponse;
    /**
     * 
     * @type {JSONDict}
     * @memberof RequestDetail
     */
    params?: JSONDict;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    requestId?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    senderAccount?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    targetAddress?: string;
}

/**
 * Check if a given object implements the RequestDetail interface.
 */
export function instanceOfRequestDetail(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function RequestDetailFromJSON(json: any): RequestDetail {
    return RequestDetailFromJSONTyped(json, false);
}

export function RequestDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestDetail {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allowance': !exists(json, 'allowance') ? undefined : AllowanceFromJSON(json['allowance']),
        'callTarget': !exists(json, 'callTarget') ? undefined : CallTargetFromJSON(json['callTarget']),
        'fungibleTokens': !exists(json, 'fungibleTokens') ? undefined : FungibleTokensFromJSON(json['fungibleTokens']),
        'gasGudget': !exists(json, 'gasGudget') ? undefined : json['gasGudget'],
        'isEVM': !exists(json, 'isEVM') ? undefined : json['isEVM'],
        'isOffLedger': !exists(json, 'isOffLedger') ? undefined : json['isOffLedger'],
        'nft': !exists(json, 'nft') ? undefined : NFTDataResponseFromJSON(json['nft']),
        'params': !exists(json, 'params') ? undefined : JSONDictFromJSON(json['params']),
        'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
        'senderAccount': !exists(json, 'senderAccount') ? undefined : json['senderAccount'],
        'targetAddress': !exists(json, 'targetAddress') ? undefined : json['targetAddress'],
    };
}

export function RequestDetailToJSON(value?: RequestDetail | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allowance': AllowanceToJSON(value.allowance),
        'callTarget': CallTargetToJSON(value.callTarget),
        'fungibleTokens': FungibleTokensToJSON(value.fungibleTokens),
        'gasGudget': value.gasGudget,
        'isEVM': value.isEVM,
        'isOffLedger': value.isOffLedger,
        'nft': NFTDataResponseToJSON(value.nft),
        'params': JSONDictToJSON(value.params),
        'requestId': value.requestId,
        'senderAccount': value.senderAccount,
        'targetAddress': value.targetAddress,
    };
}

