/* tslint:disable */
/* eslint-disable */
/**
 * Wasp API
 * REST API for the Wasp node
 *
 * The version of the OpenAPI document: 0.3.8
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ConsensusWorkflowStatus
 */
export interface ConsensusWorkflowStatus {
    /**
     * Shows current state index of the consensus
     * @type {number}
     * @memberof ConsensusWorkflowStatus
     */
    currentStateIndex?: number;
    /**
     * Shows if batch proposal is sent out in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagBatchProposalSent?: boolean;
    /**
     * Shows if consensus on batch is reached and known in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagConsensusBatchKnown?: boolean;
    /**
     * Shows if consensus algorithm is still not completed in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagInProgress?: boolean;
    /**
     * Shows if state output is received in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagStateReceived?: boolean;
    /**
     * Shows if consensus on transaction is reached in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagTransactionFinalized?: boolean;
    /**
     * Shows if transaction is posted to L1 in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagTransactionPosted?: boolean;
    /**
     * Shows if L1 reported that it has seen the transaction of current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagTransactionSeen?: boolean;
    /**
     * Shows if virtual machine has returned its results in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagVMResultSigned?: boolean;
    /**
     * Shows if virtual machine is started in current consensus iteration
     * @type {boolean}
     * @memberof ConsensusWorkflowStatus
     */
    flagVMStarted?: boolean;
    /**
     * Shows when batch proposal was last sent out in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeBatchProposalSent?: Date;
    /**
     * Shows when algorithm was last completed in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeCompleted?: Date;
    /**
     * Shows when ACS results of consensus on batch was last received in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeConsensusBatchKnown?: Date;
    /**
     * Shows when algorithm last noted that all the data for consensus on transaction had been received in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeTransactionFinalized?: Date;
    /**
     * Shows when transaction was last posted to L1 in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeTransactionPosted?: Date;
    /**
     * Shows when algorithm last noted that transaction hadd been seen by L1 in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeTransactionSeen?: Date;
    /**
     * Shows when virtual machine results were last received and signed in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeVMResultSigned?: Date;
    /**
     * Shows when virtual machine was last started in current consensus iteration
     * @type {Date}
     * @memberof ConsensusWorkflowStatus
     */
    timeVMStarted?: Date;
}

/**
 * Check if a given object implements the ConsensusWorkflowStatus interface.
 */
export function instanceOfConsensusWorkflowStatus(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ConsensusWorkflowStatusFromJSON(json: any): ConsensusWorkflowStatus {
    return ConsensusWorkflowStatusFromJSONTyped(json, false);
}

export function ConsensusWorkflowStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsensusWorkflowStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currentStateIndex': !exists(json, 'CurrentStateIndex') ? undefined : json['CurrentStateIndex'],
        'flagBatchProposalSent': !exists(json, 'FlagBatchProposalSent') ? undefined : json['FlagBatchProposalSent'],
        'flagConsensusBatchKnown': !exists(json, 'FlagConsensusBatchKnown') ? undefined : json['FlagConsensusBatchKnown'],
        'flagInProgress': !exists(json, 'FlagInProgress') ? undefined : json['FlagInProgress'],
        'flagStateReceived': !exists(json, 'FlagStateReceived') ? undefined : json['FlagStateReceived'],
        'flagTransactionFinalized': !exists(json, 'FlagTransactionFinalized') ? undefined : json['FlagTransactionFinalized'],
        'flagTransactionPosted': !exists(json, 'FlagTransactionPosted') ? undefined : json['FlagTransactionPosted'],
        'flagTransactionSeen': !exists(json, 'FlagTransactionSeen') ? undefined : json['FlagTransactionSeen'],
        'flagVMResultSigned': !exists(json, 'FlagVMResultSigned') ? undefined : json['FlagVMResultSigned'],
        'flagVMStarted': !exists(json, 'FlagVMStarted') ? undefined : json['FlagVMStarted'],
        'timeBatchProposalSent': !exists(json, 'TimeBatchProposalSent') ? undefined : (new Date(json['TimeBatchProposalSent'])),
        'timeCompleted': !exists(json, 'TimeCompleted') ? undefined : (new Date(json['TimeCompleted'])),
        'timeConsensusBatchKnown': !exists(json, 'TimeConsensusBatchKnown') ? undefined : (new Date(json['TimeConsensusBatchKnown'])),
        'timeTransactionFinalized': !exists(json, 'TimeTransactionFinalized') ? undefined : (new Date(json['TimeTransactionFinalized'])),
        'timeTransactionPosted': !exists(json, 'TimeTransactionPosted') ? undefined : (new Date(json['TimeTransactionPosted'])),
        'timeTransactionSeen': !exists(json, 'TimeTransactionSeen') ? undefined : (new Date(json['TimeTransactionSeen'])),
        'timeVMResultSigned': !exists(json, 'TimeVMResultSigned') ? undefined : (new Date(json['TimeVMResultSigned'])),
        'timeVMStarted': !exists(json, 'TimeVMStarted') ? undefined : (new Date(json['TimeVMStarted'])),
    };
}

export function ConsensusWorkflowStatusToJSON(value?: ConsensusWorkflowStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'CurrentStateIndex': value.currentStateIndex,
        'FlagBatchProposalSent': value.flagBatchProposalSent,
        'FlagConsensusBatchKnown': value.flagConsensusBatchKnown,
        'FlagInProgress': value.flagInProgress,
        'FlagStateReceived': value.flagStateReceived,
        'FlagTransactionFinalized': value.flagTransactionFinalized,
        'FlagTransactionPosted': value.flagTransactionPosted,
        'FlagTransactionSeen': value.flagTransactionSeen,
        'FlagVMResultSigned': value.flagVMResultSigned,
        'FlagVMStarted': value.flagVMStarted,
        'TimeBatchProposalSent': value.timeBatchProposalSent === undefined ? undefined : (value.timeBatchProposalSent.toISOString()),
        'TimeCompleted': value.timeCompleted === undefined ? undefined : (value.timeCompleted.toISOString()),
        'TimeConsensusBatchKnown': value.timeConsensusBatchKnown === undefined ? undefined : (value.timeConsensusBatchKnown.toISOString()),
        'TimeTransactionFinalized': value.timeTransactionFinalized === undefined ? undefined : (value.timeTransactionFinalized.toISOString()),
        'TimeTransactionPosted': value.timeTransactionPosted === undefined ? undefined : (value.timeTransactionPosted.toISOString()),
        'TimeTransactionSeen': value.timeTransactionSeen === undefined ? undefined : (value.timeTransactionSeen.toISOString()),
        'TimeVMResultSigned': value.timeVMResultSigned === undefined ? undefined : (value.timeVMResultSigned.toISOString()),
        'TimeVMStarted': value.timeVMStarted === undefined ? undefined : (value.timeVMStarted.toISOString()),
    };
}

